map:{
    ; formatVersion = 1.1
    ; pickupDatetime = 2018-05-13T16:10:10.425
    ; decoMap = map:{
        ; tableList = list:{
            ; map:{
                ; tableName = SERVICE_RANK
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = サービスランク: 会員のサービスレベルを表現するランク。(ゴールドとかプラチナとか)

author チェック 1 (普通にコメント)
author チェック2 (2回目のコメント)
author チェック3 (3回目のコメント、ここで athorが重複していなければ ok )
                        ; databaseComment = サービスランク:&nbsp\;会員のサービスレベルを表現するランク。(ゴールドとかプラチナとか)
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; yuto
                        }
                        ; pieceCode = fd289d71
                        ; pieceOwner = yuto
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T14:10:33.713
                        ; previousPieceList = list:{
                            ; ec458ce5
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER_SERVICE
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員サービス: 会員のサービス情報（ポイントサービスなど）。
テストケースのために、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。
データベースコメントとのコンフリクト解消
                        ; databaseComment = 会員サービス:&nbsp\;会員のサービス情報（ポイントサービスなど）。
テストケースのために、あえて統一性を崩してユニーク制約経由の&nbsp\;one-to-one&nbsp\;を表現している。
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = 844dafa
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T12:52:03.059
                        ; previousPieceList = list:{
                            ; fdd15de2
                        }
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = REGISTER_DATETIME
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = piece test1
piece test2
piece test3
                                ; databaseComment = null
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; yuto
                                }
                                ; pieceCode = 17929597
                                ; pieceOwner = yuto
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T20:56:25.062
                                ; previousPieceList = list:{
                                    ; 5785486b
                                    ; 263b7098
                                }
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = ながいてーぶるめいだぞーーーーーーーーーー
                        ; databaseComment = null
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; jflute
                        }
                        ; pieceCode = 1744ef5e
                        ; pieceOwner = jflute
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T16:10:56.084
                        ; previousPieceList = list:{}
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = THE_LONG_AND_WINDING_TABLE_AND_COLUMN_ID
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = ながいテーブル名のからむ
                                ; databaseComment = null
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; jflute
                                }
                                ; pieceCode = 88d98c8d
                                ; pieceOwner = jflute
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T16:10:43.381
                                ; previousPieceList = list:{}
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = VENDOR_$_DOLLAR
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = だらーがはいってるてーぶるでやんす
                        ; databaseComment = null
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; jflute
                        }
                        ; pieceCode = 33fa2f5
                        ; pieceOwner = jflute
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T16:09:31.743
                        ; previousPieceList = list:{}
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = VENDOR_$_DOLLAR_NAME
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = めっちゃ記号入れてやつ$$$%&amp\;&#x27\;&amp\;&#x27\;&amp\;#$!&quot\;&#x60\;~|^¥¥+*::\}/???.,&gt\;+@\=---\=\=,
                                ; databaseComment = null
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; jflute
                                }
                                ; pieceCode = a70cab60
                                ; pieceOwner = jflute
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T16:10:27.123
                                ; previousPieceList = list:{}
                            }
                        }
                    }
                    ; map:{
                        ; columnName = VENDOR_$_DOLLAR_ID
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = だらーがはいってるからむでやんすやんす
さらについかするよー
                                ; databaseComment = null
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; jflute
                                }
                                ; pieceCode = 2f5a6a03
                                ; pieceOwner = jflute
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T16:10:03.908
                                ; previousPieceList = list:{
                                    ; 7362395c
                                }
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = MEMBER_SECURITY
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
データベースコメントとのコンフリクト
                        ; databaseComment = 会員セキュリティ情報:&nbsp\
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = 7345a949
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T12:50:37.546
                        ; previousPieceList = list:{}
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = VENDOR_PRIMARY_KEY_ONLY
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = piece code test 1
piece code test 2
piece code test 3
piece code test 4
                        ; databaseComment = null
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; yuto
                        }
                        ; pieceCode = cfa65118
                        ; pieceOwner = yuto
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T19:45:02.106
                        ; previousPieceList = list:{
                            ; 240c6759
                            ; 62f9a2e
                            ; 3e784803
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = VENDOR_CHECK
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = piece code test
piece code test 2
piece code test 3
piece code test 4
piece code test 5
                        ; databaseComment = null
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; yuto
                        }
                        ; pieceCode = 9dcee1b7
                        ; pieceOwner = yuto
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T19:29:30.422
                        ; previousPieceList = list:{
                            ; 19ed6852
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = VENDOR_THE_LONG_AND_WINDING_TABLE_AND_COLUMN_REF
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = ↓がちゃんとうごくって痛快ですね


そもそもこめんとをめっちゃながいのいれたらどうなる？
&#x60\;&#x60\;&#x60\;
/*
 * Copyright 2014-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the &quot\;License&quot\;)\;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot\;AS IS&quot\; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.dbflute.intro.app.web.document.decomment\;

import java.time.LocalDateTime\;
import java.util.ArrayList\;
import java.util.LinkedHashSet\;
import java.util.Set\;

import javax.annotation.Resource\;

import org.apache.commons.lang3.StringUtils\;
import org.dbflute.infra.doc.decomment.DfDecoMapPickup\;
import org.dbflute.infra.doc.decomment.DfDecoMapPiece\;
import org.dbflute.infra.doc.decomment.DfDecoMapPieceTargetType\;
import org.dbflute.intro.app.logic.document.decomment.DocumentDecommentPhysicalLogic\;
import org.dbflute.intro.app.web.base.IntroBaseAction\;
import org.dbflute.intro.mylasta.action.IntroMessages\;
import org.lastaflute.core.time.TimeManager\;
import org.lastaflute.core.util.LaStringUtil\;
import org.lastaflute.web.Execute\;
import org.lastaflute.web.response.JsonResponse\;

// done cabos decoment to decomment by jflute (2017/07/27)

/**
 * @author cabos
 * @author hakiba
 * @author deco
 */
public class DocumentDecommentAction extends IntroBaseAction \{

    // \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
    //                                                                           Attribute
    //                                                                           \=\=\=\=\=\=\=\=\=
    @Resource
    private TimeManager timeManager\;
    @Resource
    private DocumentDecommentPhysicalLogic decommentPhysicalLogic\;

    // done cabos use _taexec and use _tanest by jflute (2017/08/10)
    // \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
    //                                                                             Execute
    //                                                                             \=\=\=\=\=\=\=
    // -----------------------------------------------------
    //                                             Piece Map
    //                                             ---------
    // done cabos post to save, get to diff by jflute (2017/07/27)
    // done cabos javadoc with e.g. value by jflute (2017/09/28)
    /**
     * save decomment piece map
     *
     * @param projectName project name e.g. maihamadb (NotNull)
     * @param body decomment save body (NotNull)
     * @return void (NotNull)
     */
    @Execute(urlPattern \= &quot\;\{\}/@word&quot\;)
    public JsonResponse&lt\;Void&gt\; save(String projectName, DecommentSaveBody body) \{
        // done cabos validate columnName exists if target type is COLUMN in more validation by jflute (2017/11/11)
        // this is as client error so you can use verifyOrClientError(debugMsg, expectedBool)\;
        validate(body, messages -&gt\; moreValidate(body, messages))\;
        verifyOrClientError(buildDebugMessage(body), existsColumnNameIfTargetTypeColumn(body))\;
        decommentPhysicalLogic.saveDecommentPiece(projectName, mappingToDecoMapPiece(body))\;
        return JsonResponse.asEmptyBody()\;
    \}

    private void moreValidate(DecommentSaveBody body, IntroMessages messages) \{
        if (DfDecoMapPieceTargetType.Column \=\= body.targetType &amp\;&amp\; StringUtils.isEmpty(body.columnName)) \{
            messages.addConstraintsNotEmptyMessage(&quot\;columnName&quot\;)\;
        \}
    \}

    // done cabos unneeded public here, change to private by jflute (2017/11/12)
    private String buildDebugMessage(DecommentSaveBody body) \{
        StringBuilder sb \= new StringBuilder()\;
        sb.append(&quot\;If targetType is COLUMN, columnName must exists.&quot\;).append(&quot\;\n&quot\;)\;
        sb.append(&quot\;   targetType : &quot\;).append(body.targetType.code()).append(&quot\;\n&quot\;)\;
        sb.append(&quot\;   columnName : &quot\;).append(body.columnName).append(&quot\;\n&quot\;)\;
        return sb.toString()\;
    \}

    // done cabos change exist to exists for boolean expression by jflute (2017/11/12)
    private boolean existsColumnNameIfTargetTypeColumn(DecommentSaveBody body) \{
        return !(DfDecoMapPieceTargetType.Column \=\= body.targetType &amp\;&amp\; LaStringUtil.isEmpty(body.columnName))\;
    \}

    // done cabos use mappingTo... by jflute (2017/08/10)
    private DfDecoMapPiece mappingToDecoMapPiece(DecommentSaveBody body) \{
        // done cabos rename pieceMap to piece (can be simple here) by jflute (2017/11/11)
        String author \= getAuthor()\;
        Set&lt\;String&gt\; authorSet \= new LinkedHashSet&lt\;&gt\;(body.authors)\;
        authorSet.add(author)\;
        LocalDateTime pieceDatetime \= timeManager.currentDateTime()\;
        DfDecoMapPiece piece \= new DfDecoMapPiece(DfDecoMapPiece.DEFAULT_FORMAT_VERSION, body.tableName, body.columnName, body.targetType,
                body.decomment, body.databaseComment, body.commentVersion, new ArrayList&lt\;&gt\;(authorSet),
                buildPieceCode(body, pieceDatetime, author), pieceDatetime, author, body.previousPieces)\;
        return piece\;
    \}

    private String getAuthor() \{
        return decommentPhysicalLogic.getAuthor()\;
    \}

    private String buildPieceCode(DecommentSaveBody body, LocalDateTime pieceDateTime, String author) \{
        // done (by cabos) deco use tableName, columnName, date-time, owner by jflute (2017/11/11)
        StringBuilder sb \= new StringBuilder()\;
        sb.append(body.tableName)\;
        sb.append(&quot\;:&quot\;).append(body.columnName !\= null ? body.columnName : &quot\;&quot\;)\;
        sb.append(&quot\;:&quot\;).append(body.targetType)\;
        sb.append(&quot\;:&quot\;).append(pieceDateTime)\;
        sb.append(&quot\;:&quot\;).append(author)\;
        return Integer.toHexString(sb.toString().hashCode())\;
    \}

    // -----------------------------------------------------
    //                                            Pickup Map
    //                                            ----------
    // done hakiba rename piece to pickup by jflute (2017/08/17)
    /**
     * save decomment piece map
     *
     * @param projectName project name e.g. maihamadb (NotNull)
     * @return merged pickup as json (NotNull)
     */
    @Execute(urlPattern \= &quot\;\{\}/@word&quot\;)
    public JsonResponse&lt\;DecommentPickupResult&gt\; pickup(String projectName) \{
        DfDecoMapPickup dfDecoMapPickup \= decommentPhysicalLogic.readMergedPickup(projectName)\;
        return asJson(new DecommentPickupResult(dfDecoMapPickup.getTableList()))\;
    \}
\}
&#x60\;&#x60\;&#x60\;
                        ; databaseComment = null
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; jflute
                            ; yuto
                        }
                        ; pieceCode = a66807c6
                        ; pieceOwner = yuto
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T19:23:45.547
                        ; previousPieceList = list:{
                            ; d0866b66
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER_ADDRESS
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = カラム情報の画面でのコンフリクトテスト
                        ; databaseComment = 会員住所情報:&nbsp\;会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的には&nbsp\;one-to-many&nbsp\;だが、業務的な定型条件で&nbsp\;one-to-one&nbsp\;になる。このような構造を「業務的one-to-one」と呼ぶ！
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な)&nbsp\;"1&nbsp\;:&nbsp\;0..1"&nbsp\;である。
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = 2b22a580
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T11:56:24.762
                        ; previousPieceList = list:{
                            ; b0d4fcd9
                        }
                    }
                    ; map:{
                        ; decomment = カラム情報の画面でのコンフリクトテスト
                        ; databaseComment = 会員住所情報:&nbsp\;会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的には&nbsp\;one-to-many&nbsp\;だが、業務的な定型条件で&nbsp\;one-to-one&nbsp\;になる。このような構造を「業務的one-to-one」と呼ぶ！
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な)&nbsp\;"1&nbsp\;:&nbsp\;0..1"&nbsp\;である。
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = e65e25df
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T11:56:22.501
                        ; previousPieceList = list:{
                            ; b0d4fcd9
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER_LOGIN
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員ログイン: ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには、登録する人もプログラムもはっきりしているので、(紙面の都合上もあって)ここでは共通カラムは省略している。

コンフリクト解消 / カラム情報画面。
                        ; databaseComment = 会員ログイン:&nbsp\;ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには、登録する人もプログラムもはっきりしているので、(紙面の都合上もあって)ここでは共通カラムは省略している。
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = 128854b0
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T11:57:03.965
                        ; previousPieceList = list:{
                            ; 21d911d6
                            ; 1f34e772
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = VENDOR_IDENTITY_ONLY
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = piece code test
piece code test
piece code test
piece code test
                        ; databaseComment = null
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; yuto
                        }
                        ; pieceCode = 91b21ff1
                        ; pieceOwner = yuto
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T19:33:37.584
                        ; previousPieceList = list:{
                            ; 6cee1ef4
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER_FOLLOWING
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = コンフリクトを解消
                        ; databaseComment = 会員フォローイング:&nbsp\;とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = 91edc2bc
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T11:55:50.626
                        ; previousPieceList = list:{
                            ; 447942a6
                            ; e1bffe9a
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER
                ; mappingList = list:{}
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員: 会員のプロフィールやアカウントなどの基本情報を保持する。
基本的に物理削除はなく、退会したらステータスが退会会員になる。
ライフサイクルやカテゴリの違う会員情報は、one-to-oneなどの関連テーブルにて。

コンフリクト
                        ; databaseComment = 会員:&nbsp\;会員のプロフィールやアカウントなどの基本情報を保持する。
基本的に物理削除はなく、退会したらステータスが退会会員になる。
ライフサイクルやカテゴリの違う会員情報は、one-to-oneなどの関連テーブルにて。
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = 3e615c80
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T11:49:55.185
                        ; previousPieceList = list:{}
                    }
                    ; map:{
                        ; decomment = コンフリクトテスト
                        ; databaseComment = 会員:&nbsp\;会員のプロフィールやアカウントなどの基本情報を保持する。
基本的に物理削除はなく、退会したらステータスが退会会員になる。
ライフサイクルやカテゴリの違う会員情報は、one-to-oneなどの関連テーブルにて。
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                        ; pieceCode = 1e591f9f
                        ; pieceOwner = tominaga
                        ; pieceGitBranch = null
                        ; pieceDatetime = 2017-12-31T11:49:59.057
                        ; previousPieceList = list:{}
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = MEMBER_STATUS_CODE
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 会員ステータスコード: 会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。
データベースコメントとのコンフリクト解消
                                ; databaseComment = 会員ステータスコード:&nbsp\;会員ステータスを参照するコード。
ステータスが変わるたびに、このカラムが更新される。
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                                ; pieceCode = 7828efb9
                                ; pieceOwner = tominaga
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T12:52:12.901
                                ; previousPieceList = list:{
                                    ; 245efe01
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = MEMBER_NAME
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 会員名称: 会員のフルネームの名称。
苗字と名前を分けて管理することが多いが、ここでは単純にひとまとめ。

カラムコメントのコンフリクト解消
                                ; databaseComment = 会員名称:&nbsp\;会員のフルネームの名称。
苗字と名前を分けて管理することが多いが、ここでは単純にひとまとめ。
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                                ; pieceCode = 5e59cdfd
                                ; pieceOwner = tominaga
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T11:58:10.824
                                ; previousPieceList = list:{
                                    ; 69c2659c
                                    ; 27b34e2
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 会員アカウント: ログインIDとして利用する。
昨今メールアドレスをログインIDとすることが多いので、あまり見かけないかも!?
データベースコメントとのコンフリクト
                                ; databaseComment = 会員アカウント:&nbsp\;ログインIDとして利用する。
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                                ; pieceCode = f3a66631
                                ; pieceOwner = tominaga
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T12:50:48.880
                                ; previousPieceList = list:{}
                            }
                        }
                    }
                    ; map:{
                        ; columnName = MEMBER_ID
                        ; mappingList = list:{}
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 会員ID: 連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。
カラムコメントのコンフリクト。
                                ; databaseComment = 会員ID:&nbsp\;連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                                ; pieceCode = f5bf0b86
                                ; pieceOwner = tominaga
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T11:57:46.838
                                ; previousPieceList = list:{}
                            }
                            ; map:{
                                ; decomment = 会員ID: 連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。
会員ID: 連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。
カラムコメントのコンフリクト。
                                ; databaseComment = 会員ID:&nbsp\;連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                                ; pieceCode = 9551bbaf
                                ; pieceOwner = tominaga
                                ; pieceGitBranch = null
                                ; pieceDatetime = 2017-12-31T11:57:44.776
                                ; previousPieceList = list:{}
                            }
                        }
                    }
                }
            }
        }
    }
}